DECLARE
    tag_ids UUID[];
    character_ids UUID[];
    existing_meme_id UUID;
BEGIN
    -- Step 1: Upsert tags
    INSERT INTO tags (name)
    SELECT unnest(p_tags)
    ON CONFLICT (name) DO NOTHING;

    -- Step 2: Retrieve tag IDs
    SELECT array_agg(id) INTO tag_ids
    FROM tags
    WHERE name = ANY(p_tags);

    -- Step 3: Upsert characters
INSERT INTO characters (id, name, aliases, profile_url, category, metadata)
SELECT
    COALESCE((c->>'id')::UUID, gen_random_uuid()),
    (c->>'name')::TEXT,
    ARRAY(SELECT jsonb_array_elements_text(c->'aliases')),
    (c->>'profile_url')::TEXT,
    ARRAY(SELECT jsonb_array_elements_text(c->'category')),
    (c->'metadata')::JSONB
FROM unnest(p_characters) AS c
ON CONFLICT (name) DO NOTHING;

    -- Step 4: Retrieve character IDs
    SELECT array_agg(id) INTO character_ids
    FROM characters
    WHERE name = ANY(ARRAY(
        SELECT (c->>'name')::TEXT
        FROM unnest(p_characters) AS c
    ));

    -- Step 5: Insert or update meme
    IF p_meme_id IS NULL THEN
        INSERT INTO memes (title, description, media_url, media_path, media_type, status, created_by, languages)
        VALUES (p_title, p_description, p_media_url, p_media_path, p_media_type, 'draft', p_created_by, p_languages)
        RETURNING id INTO existing_meme_id;
    ELSE
        UPDATE memes
        SET 
            title = p_title,
            description = p_description,
            media_url = COALESCE(p_media_url, media_url),
            media_path = COALESCE(p_media_path, media_path),
            media_type = COALESCE(p_media_type, media_type),
            status = 'draft',
            languages = COALESCE(p_languages, languages)
        WHERE id = p_meme_id
        RETURNING id INTO existing_meme_id;
    END IF;

    -- Step 6: Insert meme-tags relationships
    DELETE FROM meme_tags WHERE meme_id = existing_meme_id;
    INSERT INTO meme_tags (meme_id, tag_id)
    SELECT existing_meme_id, unnest(tag_ids)
    ON CONFLICT DO NOTHING;

    -- Step 7: Insert meme-characters relationships
    DELETE FROM character_meme WHERE meme_id = existing_meme_id;
    INSERT INTO character_meme (meme_id, character_id)
    SELECT existing_meme_id, unnest(character_ids)
    ON CONFLICT DO NOTHING;

    -- Step 8: Return meme details with tags and characters
    RETURN QUERY
    SELECT 
        m.id AS returned_meme_id, 
        m.title AS returned_title, 
        m.description AS returned_description, 
        m.media_url AS returned_media_url, 
        m.media_path AS returned_media_path, 
        m.media_type AS returned_media_type, 
        m.status::TEXT AS returned_status, 
        m.created_by AS returned_created_by, 
        m.languages AS returned_languages, 
        COALESCE(array_agg(DISTINCT t.name), ARRAY[]::TEXT[]) AS returned_tags,
        COALESCE(
            array_agg(
                DISTINCT jsonb_build_object(
                    'name', c.name,
                    'aliases', c.aliases,
                    'profile_url', c.profile_url,
                    'category', c.category,
                    'metadata', c.metadata
                    'id', c.id
                )
            ),
            ARRAY[]::JSONB[]
        ) AS returned_characters
    FROM memes m
    LEFT JOIN meme_tags mt ON m.id = mt.meme_id
    LEFT JOIN tags t ON mt.tag_id = t.id
    LEFT JOIN character_meme cm ON m.id = cm.meme_id
    LEFT JOIN characters c ON cm.character_id = c.id
    WHERE m.id = existing_meme_id
    GROUP BY m.id;
END;